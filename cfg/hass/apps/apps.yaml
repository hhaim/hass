

shutter_auto_off:
  module: heat_app
  class: ShuttersApp
  switch: group.shutter_r0
  enable: input_boolean.shutter_app_enable
  schedule:
       - { global_cfg: true, disable_startup: true}
       - { mode: a, start: { t: "00:00:10", d: 0}, end: { t: "07:00:00", d: 0 } }


#simple_sw_power:
#  module: heat_app
#  class: SimpleSwitch
#  schedule:
#       - { mode: a, start: { t: "16:05:00", d: 0}, end: { t: "23:50:00", d: 0} }
#  switch:
#     switch: switch.ac3
#     enable: input_boolean.simple_switch0

# day ==0 means this is a template that trigger from hebcal.event and it duplicate itself from holidays event!!
heater_ac1:
  module: heat_app
  class: HeatApp
  schedule:
       - { mode: a, start: { t: "08:00:00", d: 0}, end: { t: "11:00:00", d: 0} }  
       - { mode: a, start: { t: "11:00:01", d: 0}, end: { t: "14:45:00", d: 0} }
       - { mode: b, start: { t: "15:15:20", d: 0}, end: { t: "23:30:40", d: 0} }
       
  heater:
     default: a  # this is the default mode for input switch 
     mode: cool  #heat #cool  
     switch: switch.ac1
     input: input_boolean.ac1_input
     sensor_inside :  variable.heat_index0
     sensor_outside : variable.heat_index_outside0
     enable : input_boolean.heat_app_enable
     modes :
        a : 
          cool: { min_o: 44.0, min_i: 25.7, max_i: 26.5}
          heat: { min_o: 01.0, min_i: 21.0, max_i: 22.0} 
        b : 
          cool: { min_o: 44.0, min_i: 25.3, max_i: 26.5}
          heat: { min_o: 01.0, min_i: 21.0, max_i: 22.0} 


 # the up floor  
heater_ac_up:
  module: heat_app
  class: HeatApp
  schedule:
       - { mode: b, start: { t: "11:30:00", d: 0}, end: { t: "17:00:00", d: 0} }
       - { mode: a, start: { t: "23:20:00", d: 0}, end: { t: "23:50:00", d: 0} }
       - { mode: c, start: { t: "00:01:00", d: 0}, end: { t: "08:00:00", d: 0} }

       - { mode: c, start: { t: "00:00:10", d: 1}, end: { t: "07:00:00", d: 1} }
       - { mode: c, start: { t: "00:00:10", d: 2}, end: { t: "07:00:00", d: 2} }
       - { mode: c, start: { t: "00:00:10", d: 3}, end: { t: "07:00:00", d: 3} }
       - { mode: c, start: { t: "00:00:10", d: 4}, end: { t: "07:00:00", d: 4} }
       - { mode: c, start: { t: "00:00:10", d: 5}, end: { t: "07:00:00", d: 5} }
       - { mode: c, start: { t: "00:00:10", d: 6}, end: { t: "07:00:00", d: 6} }

       
  heater:
     default: a   # this is the default mode for input switch 
     mode: cool #heat #cool 
     switch: switch.ac2
     input: input_boolean.ac2_input  # input switch to enable/disable under feedback 
     sensor_inside :  variable.heat_index1
     sensor_outside : variable.heat_index_outside0
     enable : input_boolean.heat_app_enable
     modes :
        a : 
          cool: { min_o: 44.3, min_i: 28.5, max_i: 29.5} 
          heat: { min_o: 01.0, min_i: 14.9, max_i: 18.5} 
        b : 
          cool: { min_o: 44.9, min_i: 28.5, max_i: 29.5} 
          heat: { min_o: 01.0, min_i: 19.5, max_i: 20.2} 
        c : 
          cool: { min_o: 44.5, min_i: 25.5, max_i: 27.0} 
          heat: { min_o: 01.0, min_i: 19.5, max_i: 20.2} 
#
#heater_ac_base:
#  module: heat_app
#  class: HeatApp
#  schedule:
#       - { mode: a, start: { t: "18:15:00", d: 6}, end: { t: "18:16:00", d: 6} }
#       - { mode: a, start: { t: "23:20:00", d: 6}, end: { t: "23:21:00", d: 6} }
#       - { mode: a, start: { t: "23:30:00", d: 6}, end: { t: "08:00:00", d: 7} }
#       - { mode: b, start: { t: "13:00:00", d: 7}, end: { t: "17:00:00", d: 7} }
#       - { mode: c, start: { t: "00:00:10", d: 1}, end: { t: "07:00:00", d: 1} }
#       - { mode: c, start: { t: "00:00:10", d: 2}, end: { t: "07:00:00", d: 2} }
#       - { mode: c, start: { t: "00:00:10", d: 3}, end: { t: "07:00:00", d: 3} }
#       - { mode: c, start: { t: "00:00:10", d: 4}, end: { t: "07:00:00", d: 4} }
#       - { mode: c, start: { t: "00:00:10", d: 5}, end: { t: "07:00:00", d: 5} }
#       - { mode: c, start: { t: "00:00:10", d: 6}, end: { t: "07:00:00", d: 6} }#
#
#      #- { mode: a, start: { t: "23:30:00", d: 1}, end: { t: "08:00:00", d: 2} }
#      #- { mode: b, start: { t: "13:00:00", d: 2}, end: { t: "17:00:00", d: 2} }
#       #- { mode: a, start: { t: "23:30:00", d: 2}, end: { t: "08:00:00", d: 3} }
#       #- { mode: b, start: { t: "13:00:00", d: 3}, end: { t: "17:00:00", d: 3} }
#       
#  heater:
#     mode: cool #heat #cool 
#     switch: switch.ac3
#    sensor_inside :  variable.heat_index2
#     sensor_outside : variable.heat_index_outside0
#     enable : input_boolean.heat_app_enable_base
#     modes :
#        a : 
#          cool: { min_o: 37.3, min_i: 25.1, max_i: 26.4} 
#          heat: { min_o: 10.0, min_i: 14.9, max_i: 18.5} 
#        b : 
#          cool: { min_o: 37.9, min_i: 25.1, max_i: 26.4} 
#          heat: { min_o: 10.0, min_i: 17.0, max_i: 18.5} 
#        c : 
#          cool: { min_o: 37.5, min_i: 25.1, max_i: 26.4} 
#          heat: { min_o: 10.0, min_i: 14.9, max_i: 18.5} 
#

calc_sensor_inside1:
  module: heat_app
  class: CalcHeatIndexApp
  temp :  sensor.temperature
  hum  :  sensor.humidity
  out  :  variable.heat_index0

calc_sensor_inside2:
  module: heat_app
  class: CalcHeatIndexApp
  temp :  sensor.temp1
  hum  :  sensor.hum1
  out  :  variable.heat_index1

calc_sensor_inside3:
  module: heat_app
  class: CalcHeatIndexApp
  temp :  sensor.temp2
  hum  :  sensor.hum2
  out  :  variable.heat_index2


calc_sensor_outside:
  module: heat_app
  class: CalcHeatIndexApp
  temp :  sensor.openweathermap_temperature
  hum  :  sensor.openweathermap_humidity
  out  :  variable.heat_index_outside0
  

test_days:
  module: heat_app
  class: CTestDays


heat_timer_off:
  module: heat_app
  class: SimpleTimerOff
  input_start: input_boolean.heat_timer_0
  input_time:  input_number.heat_timer_time
  switchs : [switch.ac2,switch.ac1]

# too much noise, remove this for now too many devices   
#track_notification:
#   module: heat_app
#   class: TrackerNotification

track_alarm:
   module: heat_app
   class: AlarmNotification

high_priorty_track_alarm:
   module: heat_app
   class: AlarmNotificationHighPriorty

sabbath_manager:
  module: heat_app
  class: SabbathEvent


alarm_off:
  module: heat_app
  class: SabbathHandler

ringtone_enable:
  module: heat_app
  class: GatewayRingtone


wakeup:
  module: heat_app
  class: GatewayWakeup

avr_wakeuup:
  module: heat_app
  class: AutoTurnAVR130


doorbell_button:
  module: heat_app
  class: HomeButtonClick

room0_button:
  module: heat_app
  class: Room0ButtonClick

# watchdog 
boiler_timer_off:
  module: heat_app
  class: SimpleTimerOff
  input_start: switch.b0
  input_time:  input_number.boiler_timer_time
  switchs : [switch.b0]

cam6_timer_off:
  module: heat_app
  class: SimpleTimerOff
  input_start: switch.cam6on
  input_time:  input_number.boiler_timer_time
  switchs : [switch.cam6on]

boiler_automation:
  module: heat_app
  class: CBoilerAutomation
  switch: switch.b0
  temp: sensor.btemp0
  input_automation: input_boolean.boiler_auto_enable
  input_temp_min:   input_number.boiler_temp_min
  input_temp_max:   input_number.boiler_temp_max
  sensor_eff_power: variable.boiler_eff_power0
  sensor_eff_solar:  variable.boiler_eff_solar0
  input_uv:  sensor.openweathermap_uv_index

scheduleh: &id001
  - { mode: b, start: { t: "16:00:00", d: 0}, end: { t: "23:55:00", d: 0} }

scheduleh: &id002
       - { mode: a, start: { t: "17:00:00", d: 1}, end: { t: "22:00:00", d: 1} }
       - { mode: a, start: { t: "17:00:00", d: 2}, end: { t: "22:00:00", d: 2} }
       - { mode: a, start: { t: "17:00:00", d: 3}, end: { t: "22:00:00", d: 3} }
       - { mode: a, start: { t: "17:00:00", d: 4}, end: { t: "22:00:00", d: 4} }
       - { mode: a, start: { t: "17:00:00", d: 5}, end: { t: "22:00:00", d: 5} }
       - { mode: a, start: { t: "17:00:00", d: 6}, end: { t: "22:00:00", d: 6} }
       - { mode: a, start: { t: "17:00:00", d: 7}, end: { t: "22:00:00", d: 7} }


scheduleh: &id003
       - { mode: a, start: { t: "01:30:00", d: 1}, end: { t: "01:31:05", d: 1} }



enter_lamp:
  module: heat_app
  class: OutdoorLampWithPir
  switch: group.garden_i0
  sensor: binary_sensor.alarm16
  delay: 60
  schedule: *id002

door_lamp:
  module: heat_app
  class: OutdoorLampWithPir
  switch: switch.door_lamp0
  sensor: binary_sensor.alarm16
  delay: 60
  schedule: *id002

garden_lamp:
  module: heat_app
  class: OutdoorLampWithPir
  switch: switch.garden_lamp0
  sensor: binary_sensor.alarm15
  delay: 15
  schedule: *id001

# garden lamp projectors 
garden_lamp2:
  module: heat_app
  class: OutdoorLampWithPir
  switch: switch.gardenlamp1
  sensor: binary_sensor.alarm15
  delay: 15
  schedule: *id001


room0:
  module: heat_app
  class: OutdoorLampWithPir
  switch: group.lamps_r0
  sensor: group.room0
  delay: 30
  schedule: *id001
  disable_auto_on: True

acroom0off:
  module: heat_app
  class: OutdoorLampWithPir
  switch: switch.ac1
  sensor: group.room0
  delay: 30
  schedule: *id003
  disable_auto_on: True

acroom0off1:
  module: heat_app
  class: OutdoorLampWithPir
  switch: input_boolean.ac1_input
  sensor: group.room0
  delay: 30
  schedule: *id003
  disable_auto_on: True

water_monitor:
  module: heat_app
  class: CWaterMonitor
  sensor_water_total: sensor.water_total
  sensor_water_leak_detector: variable.water_leak_detector
  sensor_water_bursts: variable.water_bursts
  watchdog_duration_min: 50
  watchdog_leakage_ticks: 3
  max_day: 2000
  max_burst_l0: 400
  max_burst_l1: 800
  taps_switchs: [ switch.wbi_p1, switch.wbi_p2, switch.wbi_p3] # when one of them is enabled move to burstl1
  

tv_lights:
  module: heat_app
  class: CFollowState
  input: switch.tv
  output: light.light1

mii_cube:
  module: heat_app
  class: CCube

mii_button:
  module: heat_app
  class: CMiiButton

# irrigation app
wb_irrigation:
  module: heat_app
  class: CWBIrrigation
  m_temp_celsius: 31 #fill from here https://www.holiday-weather.com/ average *day* temperatures in celsius hottest month
  m_temp_hours: 13 # average day hours hottest month
  enabled: input_boolean.wbi_enabled #disable irrigation 
  water_sensor: sensor.water_total_external_norm # read total water  # optional to read water global sensor 
  notify: [tap_open] 
  taps: 
     - name: p1
       days: [2,5]  # 1-7 1 for sunday, .. 7 for saturday 
       stime: "05:45:00" # time to start irrigating 
       m_week_duration_min: input_number.wbi_week_p1_duration
       switch: switch.wbi_p1
       manual_duration: input_number.wbi_p1_duration
       queue_sensor: sensor.wb_irrigation_p1 
       water_sensor: variable.wbi_water_p1
       time_sensor: variable.wbi_last_duration_p1
       
     - name: p2
       days: [1,3,5]
       stime: "05:00:00"
       m_week_duration_min: input_number.wbi_week_p2_duration
       switch: switch.wbi_p2
       manual_duration: input_number.wbi_p2_duration
       queue_sensor: sensor.wb_irrigation_p2
       water_sensor: variable.wbi_water_p2
       time_sensor: variable.wbi_last_duration_p2

     - name: p3
       days: [1,2,3,4,5,6]  # 
       stime: "04:00:00" # time to start irrigating 
       m_week_duration_min: input_number.wbi_week_p3_duration
       switch: switch.wbi_p3
       manual_duration: input_number.wbi_p3_duration
       queue_sensor: sensor.wb_irrigation_p3 
       water_sensor: variable.wbi_water_p3
       time_sensor: variable.wbi_last_duration_p3

neta_tracer:
  module: heat_app
  class: CTrackerNeta

eventm1:
  module: heat_app
  class: EventManager
  inputd: input_boolean.eventm_disable
  inputt: input_boolean.eventm_test
  vcurrent :  variable.eventm_current
  vlast : variable.eventm_last

track_alarm:
   module: heat_app
   class: AlarmNotificationHigh

power_up_notification:
  module: heat_app
  class: PowerDownNotification


light_automation:
  module: heat_app
  class: LightApp
  switch: group.lamps_r0
  light: sensor.illumination_158d0002b75423
  schedule:
       - { global_cfg: true, disable_startup: true}
       - { mode: a, start: { t: "07:00:00", d: 0}, end: { t: "15:07:00", d: 0 } }

voice_events:
  module: heat_app
  class: RhasspyEvents
